// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/pkg/errors"
)

const (
	KeyHeaderScopes = "keyHeader.Scopes"
	KeyQueryScopes  = "keyQuery.Scopes"
)

// Defines values for OrderParamDesc.
const (
	Asc OrderParamDesc = "asc"

	Desc OrderParamDesc = "desc"
)

// ArticleSchema defines model for article-schema.
type ArticleSchema struct {
	AppIcon   string `json:"app_icon"`
	AppId     int32  `json:"app_id"`
	Author    string `json:"author"`
	Contents  string `json:"contents"`
	Date      int64  `json:"date"`
	Feed      string `json:"feed"`
	FeedLabel string `json:"feed_label"`
	FeedType  int32  `json:"feed_type"`
	Icon      string `json:"icon"`
	Id        int64  `json:"id"`
	Title     string `json:"title"`
	Url       string `json:"url"`
}

// GameSchema defines model for game-schema.
type GameSchema struct {
	Categories      []StatSchema      `json:"categories"`
	Developers      []StatSchema      `json:"developers"`
	Genres          []StatSchema      `json:"genres"`
	Icon            string            `json:"icon"`
	Id              int               `json:"id"`
	MetacriticScore int32             `json:"metacritic_score"`
	Name            string            `json:"name"`
	PlayersMax      int               `json:"players_max"`
	PlayersWeekMax  int               `json:"players_week_max"`
	Prices          GameSchema_Prices `json:"prices"`
	Publishers      []StatSchema      `json:"publishers"`
	ReleaseDate     int64             `json:"release_date"`
	ReviewsNegative int               `json:"reviews_negative"`
	ReviewsPositive int               `json:"reviews_positive"`
	ReviewsScore    float64           `json:"reviews_score"`
	Tags            []StatSchema      `json:"tags"`
}

// GameSchema_Prices defines model for GameSchema.Prices.
type GameSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// GroupSchema defines model for group-schema.
type GroupSchema struct {
	Abbreviation  string  `json:"abbreviation"`
	AppId         int32   `json:"app_id"`
	Error         string  `json:"error"`
	Headline      string  `json:"headline"`
	Icon          string  `json:"icon"`
	Id            string  `json:"id"`
	Members       int32   `json:"members"`
	MembersInChat int32   `json:"members_in_chat"`
	MembersInGame int32   `json:"members_in_game"`
	MembersOnline int32   `json:"members_online"`
	Name          string  `json:"name"`
	Primaries     int32   `json:"primaries"`
	Trending      float32 `json:"trending"`
	Url           string  `json:"url"`
}

// MessageSchema defines model for message-schema.
type MessageSchema struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// PackageSchema defines model for package-schema.
type PackageSchema struct {
	Apps             []int32              `json:"apps"`
	AppsCount        int32                `json:"apps_count"`
	BillingType      string               `json:"billing_type"`
	Bundle           []int32              `json:"bundle"`
	ChangeId         int32                `json:"change_id"`
	ChangeNumberDate int64                `json:"change_number_date"`
	ComingSoon       bool                 `json:"coming_soon"`
	DepotIds         []int32              `json:"depot_ids"`
	Icon             string               `json:"icon"`
	Id               int32                `json:"id"`
	ImageLogo        string               `json:"image_logo"`
	ImagePage        string               `json:"image_page"`
	LicenseType      string               `json:"license_type"`
	Name             string               `json:"name"`
	Platforms        []string             `json:"platforms"`
	Prices           PackageSchema_Prices `json:"prices"`
	ReleaseDate      string               `json:"release_date"`
	ReleaseDateUnix  int64                `json:"release_date_unix"`
	Status           string               `json:"status"`
}

// PackageSchema_Prices defines model for PackageSchema.Prices.
type PackageSchema_Prices struct {
	AdditionalProperties map[string]ProductPriceSchema `json:"-"`
}

// PaginationSchema defines model for pagination-schema.
type PaginationSchema struct {
	Limit        int64 `json:"limit"`
	Offset       int64 `json:"offset"`
	PagesCurrent int64 `json:"pagesCurrent"`
	PagesTotal   int64 `json:"pagesTotal"`
	Total        int64 `json:"total"`
}

// PlayerSchema defines model for player-schema.
type PlayerSchema struct {
	Avatar    string `json:"avatar"`
	Badges    int    `json:"badges"`
	Continent string `json:"continent"`
	Country   string `json:"country"`
	Games     int    `json:"games"`
	Groups    int    `json:"groups"`
	Id        string `json:"id"`
	Level     int    `json:"level"`
	Name      string `json:"name"`
	Playtime  int    `json:"playtime"`
	State     string `json:"state"`
	VanityUrl string `json:"vanity_url"`
}

// ProductPriceSchema defines model for product-price-schema.
type ProductPriceSchema struct {
	Currency        string `json:"currency"`
	DiscountPercent int32  `json:"discountPercent"`
	Final           int32  `json:"final"`
	Free            bool   `json:"free"`
	Individual      int32  `json:"individual"`
	Initial         int32  `json:"initial"`
}

// SimilarGameSchema defines model for similar-game-schema.
type SimilarGameSchema struct {
	AppId  int `json:"app_id"`
	Count  int `json:"count"`
	Order  int `json:"order"`
	Owners int `json:"owners"`
}

// StatSchema defines model for stat-schema.
type StatSchema struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// LimitParam defines model for limit-param.
type LimitParam int

// OffsetParam defines model for offset-param.
type OffsetParam int

// OrderParamDesc defines model for order-param-desc.
type OrderParamDesc string

// List of articles
type ArticlesResponse struct {
	Articles   []ArticleSchema  `json:"articles"`
	Error      string           `json:"error"`
	Pagination PaginationSchema `json:"pagination"`
}

// GameResponse defines model for game-response.
type GameResponse struct {
	Error string     `json:"error"`
	Game  GameSchema `json:"game"`
}

// List of apps, with pagination
type GamesResponse struct {
	Error      string           `json:"error"`
	Games      []GameSchema     `json:"games"`
	Pagination PaginationSchema `json:"pagination"`
}

// List of groups
type GroupsResponse struct {
	Error      string           `json:"error"`
	Groups     []GroupSchema    `json:"groups"`
	Pagination PaginationSchema `json:"pagination"`
}

// MessageResponse defines model for message-response.
type MessageResponse MessageSchema

// List of packages
type PackagesResponse struct {
	Error      string           `json:"error"`
	Packages   []PackageSchema  `json:"packages"`
	Pagination PaginationSchema `json:"pagination"`
}

// PlayerResponse defines model for player-response.
type PlayerResponse struct {
	Error  string       `json:"error"`
	Player PlayerSchema `json:"player"`
}

// PlayersResponse defines model for players-response.
type PlayersResponse struct {
	Error      string           `json:"error"`
	Pagination PaginationSchema `json:"pagination"`
	Players    []PlayerSchema   `json:"players"`
}

// List of apps, with pagination
type SimilarGamesResponse struct {
	Error string              `json:"error"`
	Games []SimilarGameSchema `json:"games"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	Offset *OffsetParam            `json:"offset,omitempty"`
	Limit  *LimitParam             `json:"limit,omitempty"`
	Order  *GetArticlesParamsOrder `json:"order,omitempty"`
	Sort   *string                 `json:"sort,omitempty"`
	Ids    *[]int32                `json:"ids,omitempty"`
	AppIds *[]int32                `json:"app_ids,omitempty"`
	Feed   *string                 `json:"feed,omitempty"`
}

// GetArticlesParamsOrder defines parameters for GetArticles.
type GetArticlesParamsOrder string

// GetGamesParams defines parameters for GetGames.
type GetGamesParams struct {
	Offset     *OffsetParam         `json:"offset,omitempty"`
	Limit      *LimitParam          `json:"limit,omitempty"`
	Order      *GetGamesParamsOrder `json:"order,omitempty"`
	Sort       *string              `json:"sort,omitempty"`
	Ids        *[]int32             `json:"ids,omitempty"`
	Tags       *[]int32             `json:"tags,omitempty"`
	Genres     *[]int32             `json:"genres,omitempty"`
	Categories *[]int32             `json:"categories,omitempty"`
	Developers *[]int32             `json:"developers,omitempty"`
	Publishers *[]int32             `json:"publishers,omitempty"`
	Platforms  *[]string            `json:"platforms,omitempty"`
}

// GetGamesParamsOrder defines parameters for GetGames.
type GetGamesParamsOrder string

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	Offset *OffsetParam          `json:"offset,omitempty"`
	Limit  *LimitParam           `json:"limit,omitempty"`
	Order  *GetGroupsParamsOrder `json:"order,omitempty"`
	Sort   *GetGroupsParamsSort  `json:"sort,omitempty"`
	Ids    *[]int64              `json:"ids,omitempty"`
}

// GetGroupsParamsOrder defines parameters for GetGroups.
type GetGroupsParamsOrder string

// GetGroupsParamsSort defines parameters for GetGroups.
type GetGroupsParamsSort string

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	Offset      *OffsetParam            `json:"offset,omitempty"`
	Limit       *LimitParam             `json:"limit,omitempty"`
	Order       *GetPackagesParamsOrder `json:"order,omitempty"`
	Sort        *GetPackagesParamsSort  `json:"sort,omitempty"`
	Ids         *[]int32                `json:"ids,omitempty"`
	BillingType *[]int32                `json:"billingType,omitempty"`
	LicenseType *[]int32                `json:"licenseType,omitempty"`
	Status      *[]int32                `json:"status,omitempty"`
}

// GetPackagesParamsOrder defines parameters for GetPackages.
type GetPackagesParamsOrder string

// GetPackagesParamsSort defines parameters for GetPackages.
type GetPackagesParamsSort string

// GetPlayersParams defines parameters for GetPlayers.
type GetPlayersParams struct {
	Offset    *OffsetParam           `json:"offset,omitempty"`
	Limit     *LimitParam            `json:"limit,omitempty"`
	Order     *GetPlayersParamsOrder `json:"order,omitempty"`
	Sort      *GetPlayersParamsSort  `json:"sort,omitempty"`
	Continent *[]string              `json:"continent,omitempty"`
	Country   *[]string              `json:"country,omitempty"`
}

// GetPlayersParamsOrder defines parameters for GetPlayers.
type GetPlayersParamsOrder string

// GetPlayersParamsSort defines parameters for GetPlayers.
type GetPlayersParamsSort string

// Getter for additional properties for GameSchema_Prices. Returns the specified
// element and whether it was found
func (a GameSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GameSchema_Prices
func (a *GameSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GameSchema_Prices to handle AdditionalProperties
func (a *GameSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GameSchema_Prices to handle AdditionalProperties
func (a GameSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PackageSchema_Prices. Returns the specified
// element and whether it was found
func (a PackageSchema_Prices) Get(fieldName string) (value ProductPriceSchema, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PackageSchema_Prices
func (a *PackageSchema_Prices) Set(fieldName string, value ProductPriceSchema) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a *PackageSchema_Prices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]ProductPriceSchema)
		for fieldName, fieldBuf := range object {
			var fieldVal ProductPriceSchema
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PackageSchema_Prices to handle AdditionalProperties
func (a PackageSchema_Prices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Articles
	// (GET /articles)
	GetArticles(w http.ResponseWriter, r *http.Request, params GetArticlesParams)
	// List Games
	// (GET /games)
	GetGames(w http.ResponseWriter, r *http.Request, params GetGamesParams)
	// Retrieve Game
	// (GET /games/{id})
	GetGamesId(w http.ResponseWriter, r *http.Request, id int32)
	// List games with similar owners
	// (GET /games/{id}/similar)
	GetGamesIdSimilar(w http.ResponseWriter, r *http.Request, id int32)
	// List Groups
	// (GET /groups)
	GetGroups(w http.ResponseWriter, r *http.Request, params GetGroupsParams)
	// List Packages
	// (GET /packages)
	GetPackages(w http.ResponseWriter, r *http.Request, params GetPackagesParams)
	// List Players
	// (GET /players)
	GetPlayers(w http.ResponseWriter, r *http.Request, params GetPlayersParams)
	// Retrieve Player
	// (GET /players/{id})
	GetPlayersId(w http.ResponseWriter, r *http.Request, id int64)
	// Update Player
	// (POST /players/{id})
	PostPlayersId(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetArticles operation middleware
func (siw *ServerInterfaceWrapper) GetArticles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "app_ids" -------------
	if paramValue := r.URL.Query().Get("app_ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "app_ids", r.URL.Query(), &params.AppIds)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter app_ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "feed" -------------
	if paramValue := r.URL.Query().Get("feed"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "feed", r.URL.Query(), &params.Feed)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter feed: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetArticles(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGames operation middleware
func (siw *ServerInterfaceWrapper) GetGames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGamesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "tags" -------------
	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter tags: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genres" -------------
	if paramValue := r.URL.Query().Get("genres"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "genres", r.URL.Query(), &params.Genres)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter genres: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "categories" -------------
	if paramValue := r.URL.Query().Get("categories"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "categories", r.URL.Query(), &params.Categories)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter categories: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "developers" -------------
	if paramValue := r.URL.Query().Get("developers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "developers", r.URL.Query(), &params.Developers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "publishers" -------------
	if paramValue := r.URL.Query().Get("publishers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "publishers", r.URL.Query(), &params.Publishers)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter publishers: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "platforms" -------------
	if paramValue := r.URL.Query().Get("platforms"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platforms", r.URL.Query(), &params.Platforms)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter platforms: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGames(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGamesId operation middleware
func (siw *ServerInterfaceWrapper) GetGamesId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGamesIdSimilar operation middleware
func (siw *ServerInterfaceWrapper) GetGamesIdSimilar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGamesIdSimilar(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGroups operation middleware
func (siw *ServerInterfaceWrapper) GetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroups(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPackages operation middleware
func (siw *ServerInterfaceWrapper) GetPackages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------
	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "billingType" -------------
	if paramValue := r.URL.Query().Get("billingType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "billingType", r.URL.Query(), &params.BillingType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter billingType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "licenseType" -------------
	if paramValue := r.URL.Query().Get("licenseType"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "licenseType", r.URL.Query(), &params.LicenseType)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter licenseType: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter status: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPackages(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPlayers operation middleware
func (siw *ServerInterfaceWrapper) GetPlayers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPlayersParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter offset: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter limit: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------
	if paramValue := r.URL.Query().Get("order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter order: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "continent" -------------
	if paramValue := r.URL.Query().Get("continent"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "continent", r.URL.Query(), &params.Continent)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter continent: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "country" -------------
	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country", r.URL.Query(), &params.Country)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter country: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlayers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetPlayersId operation middleware
func (siw *ServerInterfaceWrapper) GetPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlayersId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostPlayersId operation middleware
func (siw *ServerInterfaceWrapper) PostPlayersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, KeyHeaderScopes, []string{""})

	ctx = context.WithValue(ctx, KeyQueryScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPlayersId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/articles", wrapper.GetArticles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games", wrapper.GetGames)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games/{id}", wrapper.GetGamesId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/games/{id}/similar", wrapper.GetGamesIdSimilar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/groups", wrapper.GetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/packages", wrapper.GetPackages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players", wrapper.GetPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players/{id}", wrapper.GetPlayersId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/players/{id}", wrapper.PostPlayersId)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5jiQCIA9AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

